version: '3'
networks:
  q_network:
    driver: bridge

services:
  govready-q:
    container_name: govready-q-dev
    build:
      context: ../..
      dockerfile: dev_env/docker/images/backend/${BACKEND_DOCKERFILE}
    command: /bin/bash -c /usr/src/app/dev_env/docker/images/backend/docker-entrypoint.sh
    volumes:
      - ../..:/usr/src/app
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      - docker=True
    healthcheck:
      test: python3 dev_env/docker/healthcheck.py
      interval: 10s
      timeout: 5s
      retries: 15
    ports:
      - "8000:8000"
      - "8001:8001"
      - "2222:22"
    stdin_open: true
    tty: true
    restart: always
    networks:
      - q_network

  frontend:
    container_name: frontend
    build:
      context: ../..
      dockerfile: dev_env/docker/images/frontend/Dockerfile
    command: /bin/sh -c /usr/src/app/dev_env/docker/images/frontend/docker-entrypoint.sh
    volumes:
      - ../..:/usr/src/app
    healthcheck:
      test: sh -c "if [ ! -f /usr/src/app/frontend/static/main.js ]; then exit 1 ; else exit 0; fi"
      interval: 10s
      timeout: 5s
      retries: 25
    stdin_open: true
    tty: true
    restart: always
    networks:
      - q_network

  postgres:
    container_name: postgres_dev
    image: postgres:13.2-alpine
    ports:
      - "5432:5432"
    volumes:
      - type: volume
        source: pg-data
        target: /pg-data
        volume:
          nocopy: false
    depends_on:
      - frontend
    environment:
      POSTGRES_DB: govready_q
      POSTGRES_PASSWORD: PASSWORD
      POSTGRES_HOST_AUTH_METHOD: trust
      PGDATA: /pg-data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - q_network

volumes:
  pg-data: