# Generated by Django 3.2.16 on 2022-10-31 20:44

from django.db import migrations, models
import django.db.models.manager
import uuid


class Migration(migrations.Migration):

    dependencies = [
        ('controls', '0089_auto_20221031_1846'),
    ]

    operations = [
        migrations.CreateModel(
            name='Base64',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('updated', models.DateTimeField(auto_now=True, db_index=True, null=True)),
                ('text', models.TextField(blank=True, help_text='Name of the file before it was encoded as Base64 to be embedded in a resource. This is the name that will be assigned to the file when the file is decoded.', null=True)),
                ('mediaType', models.CharField(blank=True, help_text='Specifies a media type as defined by the Internet Assigned Numbers Authority (IANA) Media Types Registry', max_length=250, null=True)),
                ('value', models.CharField(help_text='Title of a Task', max_length=250)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Hash',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('updated', models.DateTimeField(auto_now=True, db_index=True, null=True)),
                ('algorithm', models.CharField(help_text='Method by which a hash is derived. ', max_length=250, unique=True)),
                ('value', models.CharField(blank=True, help_text='Hash value', max_length=250, null=True)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.AddField(
            model_name='element',
            name='published',
            field=models.DateTimeField(blank=True, help_text='The date and time the document was published.', null=True),
        ),
        migrations.CreateModel(
            name='RLink',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('updated', models.DateTimeField(auto_now=True, db_index=True, null=True)),
                ('href', models.CharField(help_text='A resolvable URL reference to a resource.', max_length=250, unique=True)),
                ('mediaType', models.CharField(blank=True, help_text='Specifies a media type as defined by the Internet Assigned Numbers Authority (IANA) Media Types Registry.', max_length=250, null=True)),
                ('hashes', models.ManyToManyField(blank=True, related_name='rLink', to='controls.Hash')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Resource',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('updated', models.DateTimeField(auto_now=True, db_index=True, null=True)),
                ('uuid', models.UUIDField(default=uuid.uuid4, help_text='A machine-oriented, globally unique identifier with cross-instance scope that can be used to reference this defined resource elsewhere in this or other OSCAL instances.')),
                ('title', models.CharField(help_text='Title of Location.', max_length=250)),
                ('description', models.TextField(blank=True, help_text='Description of this Role.', null=True)),
                ('remarks', models.TextField(blank=True, help_text='Additional commentary on the containing object.', null=True)),
                ('documents', models.ManyToManyField(blank=True, help_text='A document identifier qualified by an identifier scheme.', null=True, related_name='resource', to='controls.DocumentId')),
                ('links', models.ManyToManyField(blank=True, related_name='resource', to='controls.Link')),
                ('props', models.ManyToManyField(blank=True, related_name='resource', to='controls.Prop')),
            ],
            options={
                'abstract': False,
                'base_manager_name': 'prefetch_manager',
            },
            managers=[
                ('objects', django.db.models.manager.Manager()),
                ('prefetch_manager', django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name='Citation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('updated', models.DateTimeField(auto_now=True, db_index=True, null=True)),
                ('text', models.TextField(help_text='A line of citation text.', unique=True)),
                ('links', models.ManyToManyField(blank=True, related_name='citation', to='controls.Link')),
                ('props', models.ManyToManyField(blank=True, related_name='citation', to='controls.Prop')),
            ],
            options={
                'abstract': False,
            },
        ),
    ]
